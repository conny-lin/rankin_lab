function RL201510091211_CmpSameStrainMultipleExps(groupNames,ctrlNames,expSearchTerm)
% Objective: compare results of the same strain from multiple experiemnts,
% with controls.
% all groups must have .trv analysis results already generated by Dance 
% and stored in analysis folder
%
% expSearchTerm - name tag of the experiment sets
% expSearchTerm = 'slo1rescue*';
% % groupNames: a set of groupNames to be compared from each experiment.
% groupNames = {'JPS428','JPS428_400mM'};
% ctrlNames = {'N2','N2_400mM'};



%% paths [different for each machine]
% add function for shared folder
addpath('/Users/connylin/Dropbox/MATLAB/Function_Library_Public');
addpath('/Users/connylin/Dropbox/MATLAB/programs_rankinlab/Library/Modules_Development/graph_habCurve')


% define paths
pA = '/Users/connylin/Dropbox/Lab/MWT_Analysis';
p = '/Users/connylin/Dropbox/Lab/Dance Output';
timestamp = generatetimestamp;
pSave = sprintf('%s/%s_%s',p,timestamp,'RL201510091211_CmpSameStrainMultipleExps');
if isdir(pSave) == 0; mkdir(pSave); end


%% get experiment paths under searchTerm
f = dircontent(pA); % get list of folder names
f = f(regexpcellout(f,expSearchTerm)); % get target folder names
if isempty(f) == 1; error('no file found under %s',expSearchTerm); end
% create paths
a = repmat(pA,numel(f),1);
p = cell(size(f));
for x = 1:numel(f)
    p{x} = [pA,'/',f{x}];  
end
pExp = p;
clearvars p a f x; % clean memory
    
%% get experiment folders containing groupNames
% get group folders for each analysis set
[~,~,a,p] = cellfun(@dircontent,pExp,'UniformOutput',0); % get folder names
a = celltakeout(a); % take out from cell
p = celltakeout(p); % take out from cell
pG = p(ismember(a,groupNames));

% get control names from the same experiment
[p,~] = cellfun(@fileparts,pG,'UniformOutput',0);
pExp = unique(p);
clearvars a p; % clean memory


%% get trv from control and group names
gnameSet = [ctrlNames groupNames];
[~,~,a,p] = cellfun(@dircontent,pExp,'UniformOutput',0); % get folder names
a = celltakeout(a); % take out from cell
p = celltakeout(p); % take out from cell
pG = p(ismember(a,gnameSet));
[~,~,~,pMWT] = cellfun(@dircontent,pG,'UniformOutput',0); % get folder names
pMWT = celltakeout(pMWT);

% import trv
[Data] = importTrv(pMWT);

clearvars a p pG pA; % clean memory



%% group trv into exp groups
en = Data.expname;
enU = unique(en);
% create friendly enU
a = regexpcellout(enU,'_','split');
a = a(:,1);
enU_name = cellfun(@strcat,cellfunexpr(a,'E'),a,'UniformOutput',0);

gn = Data.gname;
gnU = unique(gn);
% make N2 first
i = regexpcellout(gnU,'N2*');
gnU = gnU([find(i); find(~i)]);

% creat index
[~,j] = ismember(gn,gnU);
[~,m] = ismember(en,enU);
% row 1 = pMWT row index, col 2 = exp ind col 3 = group index
Groupi = [[1:numel(Data.pMWT)]' m j]; 

msr = fieldnames(Data.Y);

%% combined results
R = struct;
for msri = 1:numel(msr)
    pSaveM = pSave;
%     if isdir(pSaveM) == 0; mkdir(pSaveM); end
    for gni = 1:numel(unique(Groupi(:,3)))
        iplate = Groupi(Groupi(:,3) == gni,1);
        plateName = Data.MWTfn(iplate);
        % validation
        if numel(unique(Data.gname(iplate))) > 1
            error('group matching incorrect')
        end
        % get data
        d = Data.Y.(msr{msri})(:,iplate);
        m = mean(d,2);
        n = numel(iplate);
        se = std(d')'./sqrt(n-1);
        R.(msr{msri}).mean(:,gni) = m;
        R.(msr{msri}).se(:,gni) = se;
        R.(msr{msri}).n(gni) = n;
    end
    d = R.(msr{msri});
    x = repmat([1:size(d.mean,1)]',1,size(d.mean,2));
    y = d.mean;
    e = d.se;

    yaxislabel = msr{msri};
    plateN = d.n;
    color = [0.5 0.5 0.5; [0.04 0.52 0.78]; 0 0 0; 1 0 0]; 
    gnPlot = regexprep(gnU,'_',' ');
    titlename = '';
    savename = [yaxislabel];
    graph_habCurve(x,y,e,gnPlot,pSaveM,yaxislabel,savename,plateN,titlename,color)


end



%% graph - line graph, each experiment in different shade

R = struct;

for msri = 1:numel(msr)
    pSaveM = [pSave,'/',msr{msri}];
    if isdir(pSaveM) == 0; mkdir(pSaveM); end
    for expi = 1:numel(unique(Groupi(:,2)))
        for gni = 1:numel(unique(Groupi(:,3)))
            iplate = Groupi(Groupi(:,2) == expi & Groupi(:,3) == gni,1);
            plateName = Data.MWTfn(iplate);
            % validation
            if numel(unique(Data.expname(iplate))) > 1 || ...
                numel(unique(Data.gname(iplate))) > 1
                error('group matching incorrect')
            end
            % get data
            d = Data.Y.(msr{msri})(:,iplate);
            m = mean(d,2);
            n = numel(iplate);
            se = std(d')'./sqrt(n-1);
            R.(msr{msri}).(enU_name{expi}).mean(:,gni) = m;
            R.(msr{msri}).(enU_name{expi}).se(:,gni) = se;
            R.(msr{msri}).(enU_name{expi}).n(gni) = n;
        end
        d = R.(msr{msri}).(enU_name{expi});
        x = repmat([1:size(d.mean,1)]',1,size(d.mean,2));
        y = d.mean;
        e = d.se;

        yaxislabel = msr{msri};
        plateN = d.n;
        color = [0.5 0.5 0.5; [0.04 0.52 0.78]; 0 0 0; 1 0 0]; 
        gnPlot = regexprep(gnU,'_',' ');
        titlename = regexprep(enU(expi),'_',' ');
        savename = [yaxislabel,'_',enU_name{expi}];
        graph_habCurve(x,y,e,gnPlot,pSaveM,yaxislabel,savename,plateN,titlename,color)

    end
end


clearvars color d e gnPlot expi gni msri pSaveM plateN plateName se x y; % clean memory
clearvars yaxislabel titlename i j iplate m n a; % clean memory



%% report
A = nan(numel(enU),numel(gnU));
for msri = 1:numel(msr)
    for expi = 1:numel(unique(Groupi(:,2)))
        A(expi,:) = R.(msr{msri}).(enU_name{expi}).n;
    end
end

A = array2table(A,'VariableNames',gnU);
T = table;
T.expname = enU_name;
T = [T A];
cd(pSave);
writetable(T,'plateN.csv');


%% other info
cd(pSave);
fid = fopen('Info.txt','w');
fprintf(fid,'code name: %s\n',mfilename);
fprintf(fid,'timestamp: %s\n',timestamp);
fclose(fid);

% finish
fprintf('\n**DONE**\n');






















