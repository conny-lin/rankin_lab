function [plateSumm,D,assayTime,Trinity] = trinitySummary2(pMWTp,start,finish,varargin)


%% get data from trinitySummary (adjust tap time to middle)
% tap will start in the middle (total column/2)+1
% REQUIRE:
%     - trinity.(wormid).dat files already generated by chor (otrinity =
%     '-O trinity -N all -o nNss*b12xyMmeSakcr'; )
%
% INPUT
%     pMWTp = path to pMWT analysis file containing trinitySummary
%     finish = finish time
%     start = start time
%     frameInt = 0.2 (default)
%     saveoption = 1 (default), 0 = don't save
%     cleanup = 1, will delete .trininty.*.dat file if trinintySummary.mat is found
%
% OUTPUT: 
%     plateSumm;
%     A = structural array containing:
%         A.wormID = wormID; 
%         A.frametime = frameTimeRecord;
%         A.data = plateSumm;
%         A.pMWT = pMWTp;


%% FUNCTION PATHS
% general home path
% pMatFun = '/Users/connylin/Dropbox/Code/Matlab/Library';
% pRLFun = '/Users/connylin/Dropbox/Code/Matlab/Library RL/Modules';
% add packges
% addpath([pMatFun,'/General']);
% addpath([pRLFun,'/Graphs']);
% addpath([pRLFun,'/Graphs/rasterPlot_colorSpeed']);

%% DEFAULTS 
nInput = 3;
frameInt = 0.2; % probably the lowest one can go
saveoption = 0;
cleanup = 0;
D = {};

%% VARARGIN PROCESSOR
vararginProcessor


%% VARIABLE CONFIRM
if start > finish
    error('start time can not be earlier than finish time');
end


%% find and load trinity summary file ++++++++++++++++++++++++++
if isempty(D)
    pTrinityMat = dircontent(pMWTp,'trinitySummary.mat');

    if isempty(pTrinityMat)
       fprintf('no trinitySummary.mat file found\n');
       [~,p] = dircontent(pMWTp,'*trinity.*.dat');
       % check if trinity.dat exist % if not try to chor
       if isempty(p) 
           warning('no trinity.*.dat file found, need to chor');
           pMWTval = chor_Trinity({pMWTp});
       end

       [~,p] = dircontent(pMWTp,'*trinity.*.dat');
       if ~isempty(p)
            convertTrinityDat2Mat({pMWTp},1); % generate trinity but do not delete
       else
           warning('no trinity.*.dat file found, and can not chor, skip');
           plateSumm = [];
           D = [];
           assayTime = [];
           Trinity = [];
           return
       end
    end

    % optional clean up
    pTrinityMat = dircontent(pMWTp,'trinitySummary.mat');
    if ~isempty(pTrinityMat)
        D = load([pMWTp,'/trinitySummary.mat'],'masterData'); D = D.masterData;
%         if cleanup
%            [~,p] = dircontent(pMWTp,'*trinity.*.dat'); 
%            if isempty(p) == 0
%                fprintf('- cleaning up trinity.*.dat file\n');
%                cellfun(@delete,p);
%            end
%         end
        Trinity = D;   
    end
else
    Trinity = D;
end
% -----------------------------------------------------------------

%% calculate assay time
% fprintf('- calculating assay time');
% tap time is indicated as colume 7 == 1, time is at column 1
% find tap time
a = 0;
t = [];
for wi = 1:size(D,1)
    i = D{wi,2}(:,7) ==1;
    if  sum(i) > 0
        t = [t; D{wi,2}(i,1)];
    end
end
tapTime = unique(t);
if isempty(tapTime) == 0 % if tap is found
    % find taps within start and finish time
    t = tapTime;
    i = t > start & t < finish;
    t = t(i);
    if isempty(t) == 0 % if one or more tap is found, 
        % align to the first tap
        tstart = t(1);
        assayTime = [flip(tstart-frameInt:-frameInt:start)  tstart:frameInt:finish+frameInt];
    elseif sum(i) == 0 % if no tap found in the time frame, 
        % align to first tap
        df = tapTime(1) - floor(tapTime(1));
        tstart = start + df;
        assayTime = [flip(tstart-frameInt:-frameInt:start)  tstart:frameInt:finish+frameInt];
    end
else % if no tap is found
    assayTime = start:frameInt:finish;
end
% fprintf('\n');


%% get column 1(time), 4(speed), 6(bias)
% fprintf('-filtering for data');
% get size
d = D(:,2);
[r,~] = cellfun(@size,d);
A = nan(sum(r),4);
r1 = 1;
for x = 1:size(D,1)
    r2 = r1+r(x)-1;
    A(r1:r2,1) = repmat(str2num(D{x,1}), r(x),1);
    A(r1:r2,2) = D{x,2}(:,1);
    A(r1:r2,3) = D{x,2}(:,4);
    A(r1:r2,4) = D{x,2}(:,6);
    r1 = r2+1;
end
% remove speed = nan and bias == nan data
A(isnan(A(:,3)) | isnan(A(:,4)),:) = [];

% convert to table;
A = array2table(A,'VariableNames',{'wormid','time','speed','bias'});
DataAll = A;
% fprintf('\n')

%% survey times
% fprintf('translate time frame to assay times');
%  PROBLEM: bias can be -1, 1, or 0. 
% check if nan for bias
D = DataAll;
if sum(isnan(D.bias)) > 0
    error('some bias record are NaN');
end
% delete data outside of assay times
D(D.time < assayTime(1) | D.time >= assayTime(end),:) = []; 


%% translate frametime(ft) into assay times
ft = D.time;
for ti = 1:numel(assayTime)-1
%     if ti == numel(assayTime)
%         i = ft >= assayTime(ti);
%     else
        i = ft >= assayTime(ti) & ft < assayTime(ti+1);
%     end
    if sum(i) == 0
       [~,fn] = fileparts(pMWTp);
       plateSumm = [];
       warning('time point (%.2fs) in plate [%s] has no data, skip',assayTime(ti),fn); 
       return
    end
    ft(i) = assayTime(ti);
end
% validate:
% 1. all frame time must equal to one of the assay time
% 2. number of unique frame time must equal to (assay time -1)
if sum(ismember(ft,assayTime)) ~= numel(ft) ||...
        numel(unique(ft)) ~= numel(assayTime)-1
    error('frame time matching failed');
else
    D.frametime = ft;
end

%% all worms must exist throughout the period
widU = unique(D.wormid);
t1 = assayTime(1);
t2 = assayTime(end-1);
n = nan(numel(widU),1);
nV = (numel(assayTime)-1);
for wi = 1:numel(widU)
    i = D.wormid == widU(wi);
    t = D.frametime(i);
    n = numel(unique(t));
    if n~=nV
        D(i,:) = []; % delete
    end
end
% fprintf('\n')


%% average speed * bias per frametimes(ftU)
% PROBLEM: sometimes speed has value as large as 1.32 but bias is 0. What
% does that mean?
% calculate speed dir
% fprintf('-converting speed to velocity...');
D.speedDir = D.speed.*D.bias;
wormidU = unique(D.wormid);
Nwormid = numel(wormidU);
ftU = unique(D.frametime);
A = nan(Nwormid,numel(ftU));
for x = 1:numel(ftU)
    t = ftU(x);

    for wi = 1:numel(wormidU)
        d = D(D.frametime == t & D.wormid == wormidU(wi),:);
        if sum(diff(d.bias)) == 0 
        % if move within this frame all in one dir
        % calculate mean of all data
            A(wi,x) = mean(d.speedDir);
        elseif sum(diff(d.bias)) ~= 0 
        % if movement within this frame contains dir shift
            if sum(d.bias < 0) > 0
            % if reversal exists, only calculate reversal mean
                A(wi,x) = mean(d.speedDir(d.bias < 0));
            elseif sum(d.bias > 0) > 0
            % if only forward exists, only calculate forward mean
                A(wi,x) = mean(d.speedDir(d.bias > 0));
            elseif sum(d.bias == 0) > 0
            % if only bias == 0 (presumably pause), only calculate pase
            % speedDir, which is set to zero
                A(wi,x) = mean(d.speedDir(d.bias == 0));
            end
        end
    end
end
plateSumm = A;
% if any nan results, flag
if sum(any(isnan(A))) > 0
   error('some nan results, code to fix'); 
end
% 


%% output
% create output structure array
% A = struct;
% A.wormID = wormID;
% A.frametime = frameTimeRecord;
% A.data = plateSumm;
% A.pMWT = pMWTp;

% text output
if saveoption == 1
    dlmwrite(sprintf('%s/%ds_%ds_fint_%.1f_N%d_wormID.trinitySummary',pMWTp,start,finish,frameInt,size(wormID,1)),wormID);
    dlmwrite(sprintf('%s/%ds_%ds_fint_%.1f_N%d_frametime.trinitySummary',pMWTp,start,finish,frameInt,size(wormID,1)),frameTimeRecord)
    dlmwrite(sprintf('%s/%ds_%ds_fint_%.1f_N%d_rasterdata.trinitySummary',pMWTp,start,finish,frameInt,size(wormID,1)),plateSumm)
end

