function [plateSumm,D,assayStartTime,Trinity] = trinitySummary_v1707(TrinityData,start,finish,dur,varargin)


%% get data from trinitySummary (adjust tap time to middle)
% tap will start in the middle (total column/2)+1
% REQUIRE:
%     - trinity.(wormid).dat files already generated by chor (otrinity =
%     '-O trinity -N all -o nNss*b12xyMmeSakcr'; )
%
% INPUT
%     pMWTp = path to pMWT analysis file containing trinitySummary
%     finish = finish time
%     start = start time
%     frameInt = 0.2 (default)
%     saveoption = 1 (default), 0 = don't save
%     cleanup = 1, will delete .trininty.*.dat file if trinintySummary.mat is found
%
% OUTPUT: 
%     plateSumm;
%     A = structural array containing:
%         A.wormID = wormID; 
%         A.frametime = frameTimeRecord;
%         A.data = plateSumm;
%         A.pMWT = pMWTp;


%% DEFAULTS 
frameInt = 0.2; % probably the lowest one can go
saveopt = 0;
displayopt = false;
D = {};


%% VARARGIN PROCESSOR
vararginProcessor;


%% VARIABLE CONFIRM
if start > finish
    error('start time can not be earlier than finish time');
end




%% get legend
Legend = chormaster5('TrinityOnly','','legendonly',true);
Legend = Legend.trinity;


%% calculate assay time
% tap time is indicated as colume 7 == 1, time is at column 1
timei = find(ismember(Legend,'time'));
tapi = find(ismember(Legend,'tap'));
speedi = find(ismember(Legend,'speed'));
biasi = find(ismember(Legend,'bias'));

%% find recording time
D = Trinity;
t = cell(size(D,1),1);
t1 = t;
tsf = nan(size(D,1),2);
for wi = 1:size(D,1)
    tt = D{wi,2}(:,timei); % find record time
    t{wi} = tt;
    tsf(wi,1) = tt(1);
    tsf(wi,2) = tt(end);
    t1{wi} = D{wi,2}(:,tapi) ==1; % find tap time
end
t = cell2mat(t);
t1 = cell2mat(t1);
recordTimeu = unique(t);
tapTimeu = unique(t(t1));


%% create assay times
if isempty(tapTimeu) == 0 % if tap is found, align recording
    % find taps within start and finish time
    t = tapTimeu;
    i = t > start & t < finish;
    t = t(i);
    if isempty(t) == 0 % if one or more tap is found, 
        % align to the first tap
        t1 = t(1);
        assayStartTimeL = [flip(t1-frameInt:-frameInt:start)  t1:frameInt:finish+frameInt];
    elseif sum(i) == 0 % if no tap found in the time frame, 
        % align to first tap
        df = tapTimeu(1) - floor(tapTimeu(1));
        t1 = start + df;
        assayStartTimeL = [flip(t1-frameInt:-frameInt:start)  t1:frameInt:finish+frameInt];
    end
    
else % if no tap is found
    assayStartTimeL = start:frameInt:finish;
end

% get actual start time
assayStartTime = nan(size(assayStartTimeL));
for ti = 1:numel(assayStartTimeL)
   t = assayStartTimeL(ti);
   [~,j] = min(abs(recordTimeu - t));
   assayStartTime(ti) = recordTimeu(j);
end

% get actual end time
assayEndTimeL = assayStartTimeL + dur;
assayEndTime = nan(size(assayEndTimeL));
for ti = 1:numel(assayEndTimeL)
   t = assayEndTimeL(ti);
   [~,j] = min(abs(recordTimeu - t));
   assayEndTime(ti) = recordTimeu(j);
end



%% get data valid within assay time
DC = D;
% get column 1(time), 4(speed), 6(bias)
wormN = cell2mat(cellfun(@size,DC(:,2),'UniformOutput',0)); % get size
wormNc = cell(size(DC,1),1);
for i= 1:size(DC,1)
    a = str2num(DC{i,1});
    wormNc{i} = repmat(a,wormN(i,1),1);
end
wormNC = cell2mat(wormNc);
DC = cell2mat(DC(:,2));
DC = [wormNC DC];

% remove data outside of assay time
tval = false(size(DC,1),1);
t = DC(:,timei+1);
for ti = 1:numel(assayStartTime)
    tval(t <= assayEndTime(ti) & t >= assayStartTime(ti)) = true;
end
DC = DC(tval,[1, timei+1,speedi+1,biasi+1]);

% % remove speed = nan and bias == nan data
% A(isnan(A(:,3)) | isnan(A(:,4)),:) = [];

% convert to table;
A = array2table(DC,'VariableNames',{'wormid','time','speed','bias'});


%% survey times
%  PROBLEM: bias can be -1, 1, or 0. 
% check if nan for bias
% D = DataAll;
% if sum(isnan(D.bias)) > 0
%     error('some bias record are NaN');
% end


%% translate frametime(ft) into assay times
ft = D.time;
for ti = 1:numel(assayStartTime)-1
%     if ti == numel(assayTime)
%         i = ft >= assayTime(ti);
%     else
        i = ft >= assayStartTime(ti) & ft < assayStartTime(ti+1);
%     end
    if sum(i) == 0
       [~,fn] = fileparts(pMWTp);
       plateSumm = [];
       warning('time point (%.2fs) in plate [%s] has no data, skip',assayStartTime(ti),fn); 
       return
    end
    ft(i) = assayStartTime(ti);
end
% validate:
% 1. all frame time must equal to one of the assay time
% 2. number of unique frame time must equal to (assay time -1)
if sum(ismember(ft,assayStartTime)) ~= numel(ft) ||...
        numel(unique(ft)) ~= numel(assayStartTime)-1
    error('frame time matching failed');
else
    D.frametime = ft;
end


%% all worms must exist throughout the period
widU = unique(D.wormid);
t1 = assayStartTime(1);
t2 = assayStartTime(end-1);
n = nan(numel(widU),1);
nV = (numel(assayStartTime)-1);
for wi = 1:numel(widU)
    i = D.wormid == widU(wi);
    t = D.frametime(i);
    n = numel(unique(t));
    if n~=nV
        D(i,:) = []; % delete
    end
end


%% average speed * bias per frametimes(ftU)
% PROBLEM: sometimes speed has value as large as 1.32 but bias is 0. What
% does that mean?
% calculate speed dir
% fprintf('-converting speed to velocity...');
D.speedDir = D.speed.*D.bias;
wormidU = unique(D.wormid);
Nwormid = numel(wormidU);
ftU = unique(D.frametime);
A = nan(Nwormid,numel(ftU));
for x = 1:numel(ftU)
    t = ftU(x);

    for wi = 1:numel(wormidU)
        d = D(D.frametime == t & D.wormid == wormidU(wi),:);
        if sum(diff(d.bias)) == 0 
        % if move within this frame all in one dir
        % calculate mean of all data
            A(wi,x) = mean(d.speedDir);
        elseif sum(diff(d.bias)) ~= 0 
        % if movement within this frame contains dir shift
            if sum(d.bias < 0) > 0
            % if reversal exists, only calculate reversal mean
                A(wi,x) = mean(d.speedDir(d.bias < 0));
            elseif sum(d.bias > 0) > 0
            % if only forward exists, only calculate forward mean
                A(wi,x) = mean(d.speedDir(d.bias > 0));
            elseif sum(d.bias == 0) > 0
            % if only bias == 0 (presumably pause), only calculate pase
            % speedDir, which is set to zero
                A(wi,x) = mean(d.speedDir(d.bias == 0));
            end
        end
    end
end
plateSumm = A;
% if any nan results, flag
if sum(any(isnan(A))) > 0
   error('some nan results, code to fix'); 
end
% 


%% output
% create output structure array
% A = struct;
% A.wormID = wormID;
% A.frametime = frameTimeRecord;
% A.data = plateSumm;
% A.pMWT = pMWTp;

% text output
if saveopt == 1
    dlmwrite(sprintf('%s/%ds_%ds_fint_%.1f_N%d_wormID.trinitySummary',pMWTp,start,finish,frameInt,size(wormID,1)),wormID);
    dlmwrite(sprintf('%s/%ds_%ds_fint_%.1f_N%d_frametime.trinitySummary',pMWTp,start,finish,frameInt,size(wormID,1)),frameTimeRecord)
    dlmwrite(sprintf('%s/%ds_%ds_fint_%.1f_N%d_rasterdata.trinitySummary',pMWTp,start,finish,frameInt,size(wormID,1)),plateSumm)
end

